//! `default_config` allows you to specify defaults for a `struct` that is
//! intended to be used as a configuration structure. The defaults you supply
//! can be overriden by reading in from a YAML file.
//!
//! # Examples
//!
//! ```
//! # #[macro_use] extern crate default_config;
//! # #[macro_use] extern crate serde_derive;
//! # extern crate serde;
//! # extern crate serde_yaml;
//! #
//! # use std::io::Read;
//! # use default_config::Config;
//! #
//! # fn main() {
//! default_config!(MyConfig, MyConfigDefault, {
//!     width: u32: 640,
//!     height: u32: 480
//! });
//!
//! let config = MyConfig::merge_with_file("config.yml");
//!
//! // Because the file does not exist in this example, the defaults are used
//! assert_eq!(config.width, 640);
//! assert_eq!(config.height, 480);
//! # }
//! ```
#[macro_use] extern crate serde_derive;
extern crate serde;
extern crate serde_yaml;

use std::io::Read;
use std::fs::File;
use std::path::Path;

/// Config operations implemented by the macro output.
///
/// All structs generated by the `default_config` macro implement this trait.
pub trait Config {
    type C: Config + Default;

    /// Override a config with a reader.
    ///
    /// Attempt to deserialize the reader and apply the overrides. If
    /// deserialization fails, all defaults will be used.
    fn merge_with_reader<R: Read>(reader: R) -> Self::C;

    /// Override a config with a file.
    ///
    /// Attempt to deserialize the file and apply the overrides. If
    /// deserialization fails, all defaults will be used.
    fn merge_with_file<P: AsRef<Path>>(path: P) -> <<Self as Config>::C as Config>::C {
        match File::open(path) {
            Ok(file) => Self::C::merge_with_reader(file),
            Err(_) => <<Self as Config>::C as Config>::C::default()
        }
    }
}

#[macro_export]
/// Generates a struct with the same name as the first argument and with the
/// field identifiers, types and defaults of the third argument. The struct
/// will be exposed publicly, so the macro is intended to be used at the module
/// level.
macro_rules! default_config {
    ( 
        $name:ident, $default:ident, {
            $( $id:ident: $type:ty: $value:expr ),*
        }
    ) => {
        #[derive(Serialize, Deserialize)]
        pub struct $name {
            $(
                $id: $type,
            )*
        }

        #[derive(Serialize, Deserialize)]
        struct $default {
            $(
                $id: Option<$type>,
            )*
        }

        impl Config for $name {
            type C = $name;

            fn merge_with_reader<R: Read>(reader: R) -> Self {
                match serde_yaml::from_reader::<R, $default>(reader) {
                    Ok(overrides) => {
                        Self {
                            $(
                                $id: overrides.$id.unwrap_or($name::default().$id),
                            )*
                        }
                    },
                    Err(_) => Self::default()
                }
            }
        }

        impl Default for $name {
            fn default() -> Self {
                Self {
                    $(
                        $id: $value,
                    )*
                }
            }
        }
    };
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::io::Cursor;

    #[test]
    fn no_defaults_are_overriden() {
        default_config!(Test, TestDefault, {
            foo: i64: 42,
            bar: u16: 451
        });

        let buffer = Cursor::new("");
        let config = Test::merge_with_reader(buffer);
        assert_eq!(config.foo, 42_i64);
        assert_eq!(config.bar, 451_u16);
    }

    #[test]
    fn all_defaults_are_overriden() {
        default_config!(TestInner, TestInnerDefault, {
            foo: i64: 42,
            bar: u16: 451
        });

        default_config!(Test, TestDefault, {
            baz: String: String::from("baz"),
            quux: TestInner: TestInner::default()
        });

        let buffer = Cursor::new("baz: real baz\nquux:\n  foo: 10\n  bar: 20");
        let config = Test::merge_with_reader(buffer);
        assert_eq!(config.baz, String::from("real baz"));
        assert_eq!(config.quux.foo, 10);
        assert_eq!(config.quux.bar, 20);
    }

    #[test]
    fn top_level_defaults_are_overriden() {
        default_config!(TestInner, TestInnerDefault, {
            foo: i64: 42,
            bar: u16: 451
        });

        default_config!(Test, TestDefault, {
            baz: String: String::from("baz"),
            quux: TestInner: TestInner::default()
        });

        let buffer = Cursor::new("baz: real baz");
        let config = Test::merge_with_reader(buffer);
        assert_eq!(config.baz, String::from("real baz"));
        assert_eq!(config.quux.foo, 42);
        assert_eq!(config.quux.bar, 451);
    }

    #[test]
    fn nested_defaults_are_overriden() {
        default_config!(TestInner, TestInnerDefault, {
            foo: i64: 42,
            bar: u16: 451
        });

        default_config!(Test, TestDefault, {
            baz: String: String::from("baz"),
            quux: TestInner: TestInner::default()
        });

        let buffer = Cursor::new("quux:\n  foo: 10\n  bar: 20");
        let config = Test::merge_with_reader(buffer);
        assert_eq!(config.baz, String::from("baz"));
        assert_eq!(config.quux.foo, 10);
        assert_eq!(config.quux.bar, 20);
    }
}
